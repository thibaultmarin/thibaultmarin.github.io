<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
	<title>misc/ blog RSS</title>
	<atom:link href="/blog/index.html/rss.xml" rel="self" type="application/rss+xml" />
	<link>/blog/index.html</link>
	<description><![CDATA[]]></description>
	<language>en</language>
	<pubDate>Mon, 04 Dec 2017 21:31:13 -0600</pubDate>
	<lastBuildDate>Mon, 04 Dec 2017 21:31:13 -0600</lastBuildDate>
	<generator>Emacs 25.2 Org-mode 9.1.3</generator>
	<webMaster>t (nil)</webMaster>
	<image>
		<url>http://orgmode.org/img/org-mode-unicorn-logo.png</url>
		<title>misc/ blog RSS</title>
		<link>/blog/index.html</link>
	</image>

	<div id="table-of-contents">
		<h2>Table of Contents</h2>
		<div id="text-table-of-contents">
			<ul>
				<li><a href="#org62064b4">Personal wiki in org</a>
				<ul>
					<li><a href="#org8437b36">Introduction</a></li>
				</ul>
				</li>
				<li><a href="#org35bc9e1">hpp2plantuml - Convert C++ header files to PlantUML</a>
				<ul>
					<li><a href="#sec-intro">Motivation</a></li>
				</ul>
				</li>
				<li><a href="#org288365c">Personal website in org</a>
				<ul>
					<li><a href="#org93ac94b">Introduction</a></li>
				</ul>
				</li>
				<li><a href="#orgc498e7a">Awesome-wm configuration</a>
				<ul>
					<li><a href="#orgbbcef43">Introduction </a></li>
				</ul>
				</li>
			</ul>
		</div>
	</div>

	<item>
		<title>Personal wiki in org</title>
		<link>/blog/index.html/../posts/2017-08-15-Personal_wiki_in_org.html</link>
		<author>t (nil)</author>
		<guid isPermaLink="false">2017-08-15-Personal_wiki_in_org.org</guid>
		<pubDate>Tue, 15 Aug 2017 00:00:00 -0500</pubDate>

		<description><![CDATA[<div id="outline-container-org8437b36" class="outline-3">
		<h3 id="org8437b36">Introduction</h3>
		<div class="outline-text-3" id="text-org8437b36">
		<p>
		This post describes the setup to generate a personal wiki in org.  It elaborates
		on this <a href="2016-11-13-Personal_website_in_org.html">previous post</a> describing the generation of this website.  Generally, the
		wiki setup is a simplified version of the website, with a few additions:
		</p>

		<ul class="org-ul">
		<li>search functionality (implemented client side using ),</li>
		<li>support link to <a href="http://www.refbase.net">refbase</a> instance (bibliography manager).</li>
		</ul>

		<p>
		Compared to other wiki software (e.g. <a href="https://www.mediawiki.org/wiki/MediaWiki">MediaWiki</a>), this does not include user
		management or the ability to edit pages and upload files from the webpage.  On
		the other hand, it is fully text-based which allows the use of version control.
		</p>



		<p>
		<a href="posts/2017-08-15-Personal_wiki_in_org.html">(Read more)</a>
		</p>
		</div>
		</div>
		]]></description>
	</item>

	<item>
		<title>hpp2plantuml - Convert C++ header files to PlantUML</title>
		<link>/blog/index.html/../posts/2016-11-30-hpp2plantuml_-_Convert_C++_header_files_to_PlantUML.html</link>
		<author>t (nil)</author>
		<guid isPermaLink="false">2016-11-30-hpp2plantuml_-_Convert_C++_header_files_to_PlantUML.org</guid>
		<pubDate>Wed, 30 Nov 2016 00:00:00 -0600</pubDate>

		<description><![CDATA[<div id="outline-container-orgad486e1" class="outline-3">
		<h3 id="sec-intro">Motivation</h3>
		<div class="outline-text-3" id="text-sec-intro">
		<p>
		The purpose of this tool is to convert C++ header files to a UML representation
		in <a href="https://plantuml.com">PlantUML</a> syntax that can be used to generate diagrams with PlantUML.
		</p>

		<p>
		<a href="https://plantuml.com">PlantUML</a> is a program rendering UML diagrams from plain text inputs using an
		expressive language.
		</p>

		<p>
		This package generates the text input to PlantUML from C++ header files.  Its
		ambition is limited but it should produce reasonable conversion for simple class
		hierarchies.  It aims at supporting:
		</p>
		<ul class="org-ul">
		<li>class members with properties (<code>private</code>, <code>method</code>, <code>protected</code>), methods with
		basic qualifiers (<code>static</code>, abstract),</li>
		<li>inheritance relationships,</li>
		<li>aggregation relationships (very basic support).</li>
		</ul>

		<p>
		The package relies on the <a href="http://senexcanis.com/open-source/cppheaderparser/">CppHeaderParser</a> package for parsing of C++ header
		files.
		</p>



		<p>
		<a href="posts/2016-11-30-hpp2plantuml_-_Convert_C++_header_files_to_PlantUML.html">(Read more)</a>
		</p>
		</div>
		</div>
		]]></description>
	</item>

	<item>
		<title>Personal website in org</title>
		<link>/blog/index.html/../posts/2016-11-13-Personal_website_in_org.html</link>
		<author>t (nil)</author>
		<guid isPermaLink="false">2016-11-13-Personal_website_in_org.org</guid>
		<pubDate>Sun, 13 Nov 2016 00:00:00 -0600</pubDate>

		<description><![CDATA[<div id="outline-container-org93ac94b" class="outline-3">
		<h3 id="org93ac94b">Introduction</h3>
		<div class="outline-text-3" id="text-org93ac94b">
		<p>
		This post describes the configuration for this website, which is statically
		generated using emacs and org-mode.  Org-mode's publishing functionality is used
		to generate the HTML content from source <code>org</code> files.  Here is a list of
		existing examples that I have used to build this website:
		</p>

		<ul class="org-ul">
		<li><a href="http://bastibe.de/2013-11-13-blogging-with-emacs.html">http://bastibe.de/2013-11-13-blogging-with-emacs.html</a></li>
		<li><a href="http://emacs-doctor.com/blogging-from-emacs.html">http://emacs-doctor.com/blogging-from-emacs.html</a></li>
		<li><a href="http://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html">http://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html</a></li>
		<li><a href="https://github.com/howardabrams/dot-files/blob/master/emacs-blog.org">https://github.com/howardabrams/dot-files/blob/master/emacs-blog.org</a></li>
		<li><a href="http://www.john2x.com/blog/blogging-with-orgmode.html">http://www.john2x.com/blog/blogging-with-orgmode.html</a></li>
		<li><a href="https://ogbe.net/blog/blogging_with_org.html">https://ogbe.net/blog/blogging_with_org.html</a></li>
		<li><a href="http://nicolas.petton.fr/blog/blogging-with-org-mode.html">http://nicolas.petton.fr/blog/blogging-with-org-mode.html</a></li>
		</ul>

		<p>
		As for other posts in this website, the actual configuration files, including
		emacs-lisp configuration, CSS, etc. can be generated by tangling the org-file
		(<code>org-babel-tangle</code> bound to <kbd>C-c</kbd>&nbsp;<kbd>C-v</kbd>&nbsp;<kbd>t</kbd> by default).
		</p>

		<p>
		The folder structure is similar to the one described in the <a href="http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">Worg tutorial</a>: the
		website source is composed of org files with the following structure:
		</p>

		<div class="org-src-container">
		<pre class="src src-sh" id="org3aca044">tree -a org/ -I <span style="color: #8b2252;">"*~"</span>
		</pre>
		</div>

		<pre class="example">
		org/
		├── blog.org
		├── css
		│   └── site.css
		├── html
		│   ├── html_head.html
		│   ├── html_postamble.html
		│   └── html_preamble.html
		├── images
		│   ├── 2016-10-05-Awesome-wm_configuration
		│   │   ├── desktop-cmus-popup.png
		│   │   ├── desktop-confirm_action.png
		│   │   ├── desktop-global_prompt-help.png
		│   │   ├── desktop-main.png
		│   │   └── desktop-wibox.png
		│   ├── 2016-11-13-Personal_website_in_org
		│   │   └── website-post.png
		│   └── feed-icon-28x28.png
		├── index.org
		├── js
		│   └── org-info.js
		├── posts
		│   ├── 2016-10-05-Awesome-wm_configuration.org
		│   └── 2016-11-13-Personal_website_in_org.org
		├── rss.org
		├── setup.org
		└── sitemap.org

		7 directories, 19 files
		</pre>

		<p>
		The start page is the index.org file, which is described .  It includes
		links to the different pages, and a list of recent blog posts.  Blog posts are
		located in the <code>posts/</code> folder, where each file contains a single post and the
		filename is prefixed by the post date.  Attachments for blog posts (e.g. images)
		are placed in the <code>images/</code> folder with a subfolder corresponding to the post
		filename.  Blog posts are pushed to the blog from regular org files using a
		which handles file naming and attachments.  Finally, the static
		content is located in the <code>css/</code>, <code>js/</code> and <code>html/</code> folders.
		</p>

		<p>
		The workflow I use to update this website is as follows:
		</p>
		<ul class="org-ul">
		<li>for basic webpages (i.e. everything but the blog posts), edit the org files in
		the source tree,</li>
		<li>for blog posts, create a standalone org file outside of the website source
		tree, then push it using the function, which handles file links
		and adds boilerplate options to the org file before moving the processed org
		file to the website source tree,</li>
		<li>finally run the to generate the website,</li>
		<li>optionally push the changes to the actual server (e.g. github pages).</li>
		</ul>



		<p>
		<a href="posts/2016-11-13-Personal_website_in_org.html">(Read more)</a>
		</p>
		</div>
		</div>
		]]></description>
</item>

<item>
	<title>Awesome-wm configuration</title>
	<link>/blog/index.html/../posts/2016-10-05-Awesome-wm_configuration.html</link>
	<author>t (nil)</author>
	<guid isPermaLink="false">2016-10-05-Awesome-wm_configuration.org</guid>
	<pubDate>Wed, 05 Oct 2016 00:00:00 -0500</pubDate>

	<description><![CDATA[<div id="outline-container-orgbbcef43" class="outline-3">
	<h3 id="orgbbcef43">Introduction </h3>
	<div class="outline-text-3" id="text-orgbbcef43">
	<p>
	This file contains my configuration for the <a href="https://awesome.naquadah.org/">awesome</a> window manager along with
	documentation of the different modules developed and used. The actual
	configuration (a set of lua files) can be produced by running <code>org-babel-tangle</code>
	on the original org file.
	</p>

	<p>
	The resulting desktop is shown on Fig.&nbsp;<a href="#orgb690de8">1</a>.  The following
	bash script produces the image.  The most interesting part is the top wibox,
	which is shown enlarged on Fig.&nbsp;.
	</p>

	<div class="org-src-container">
	<pre class="src src-sh" id="org257ae27">
	<span style="color: #b22222;"># </span><span style="color: #b22222;">Could get these from xrandr</span>
	<span style="color: #a0522d;">res_x</span>=1920
	<span style="color: #a0522d;">res_y</span>=1080
	<span style="color: #a0522d;">screen_idx</span>=1

	<span style="color: #a0522d;">width</span>=$(( $<span style="color: #a0522d;">res_x</span> ))
	<span style="color: #a0522d;">height</span>=$(( $<span style="color: #a0522d;">res_y</span> ))
	<span style="color: #a0522d;">start_x</span>=$(( $<span style="color: #a0522d;">screen_idx</span> * $<span style="color: #a0522d;">res_x</span> ))
	<span style="color: #a0522d;">start_y</span>=$(( 0 ))

	scrot desktop.png
	convert desktop.png -crop ${<span style="color: #a0522d;">width</span>}x${<span style="color: #a0522d;">height</span>}+${<span style="color: #a0522d;">start_x</span>}+${<span style="color: #a0522d;">start_y</span>} desktop-main.png
	rm desktop.png -rf
	</pre>
	</div>



	<div id="orgb690de8" class="figure">
	<p><a href="../images/2016-10-05-Awesome-wm_configuration/desktop-main.png" width="100%"><img src="../images/2016-10-05-Awesome-wm_configuration/desktop-main.png" alt="desktop-main.png" width="100%" /></a>
	</p>
	<p><span class="figure-number">Figure 1: </span>My awesome-wm desktop.</p>
	</div>


	<p>
	This configuration is currently used on the following system:
	</p>

	<dl class="org-dl">
	<dt>OS</dt><dd></dd>
	</dl>
	<div class="org-src-container">
	<pre class="src src-sh" id="org6f0a31c">lsb_release -a
	uname -a
	</pre>
	</div>

	<pre class="example">
	Distributor ID:	Debian
	Description:	Debian GNU/Linux 9.0 (stretch)
	Release:	9.0
	Codename:	stretch
	Linux dell-desktop 4.9.0-1-amd64 #1 SMP Debian 4.9.2-2 (2017-01-12) x86_64 GNU/Linux

	</pre>

	<dl class="org-dl">
	<dt>awesome</dt><dd></dd>
	</dl>
	<div class="org-src-container">
	<pre class="src src-sh" id="org2c325eb">awesome --version
	</pre>
	</div>

	<pre class="example">
	awesome v4.0 (Harder, Better, Faster, Stronger)
	• Compiled against Lua 5.1.5 (running with Lua 5.1)
	• D-Bus support: ✔
	• execinfo support: ✔
	• RandR 1.5 support: ✔
	• LGI version: 0.9.1

	</pre>

	<dl class="org-dl">
	<dt>emacs</dt><dd></dd>
	</dl>
	<div class="org-src-container">
	<pre class="src src-emacs-lisp" id="orgcdf0814">(emacs-version)
	</pre>
	</div>

	<pre class="example">
	"GNU Emacs 25.1.1 (x86_64-pc-linux-gnu, GTK+ Version 3.22.5)
	of 2016-12-31, modified by Debian"

	</pre>

	<dl class="org-dl">
	<dt>org-mode</dt><dd></dd>
	</dl>
	<div class="org-src-container">
	<pre class="src src-emacs-lisp" id="org40c6986">(replace-regexp-in-string <span style="color: #8b2252;">"@.*)"</span> <span style="color: #8b2252;">"@ ... )"</span> (org-version nil t))
	</pre>
	</div>

	<pre class="example">
	"Org mode version 9.0.4 (release_9.0.4-270-ga10ddb @ ... )"

	</pre>

	<p>
	Most of the code in this configuration comes from the default <code>rc.lua</code> delivered
	with awesome-wm.  On my system, it is located under <code>/etc/xdg/awesome/rc.lua</code>.
	</p>

	<p>
	Tangling this org file produces several lua files.  The main configuration is
	contained in the <code>rc.lua</code> file (widgets, keybindings), and code for modules is
	tangled to separate files.  To disable a component of this configuration, the
	corresponding code block must be skipped during tangling.  To disable tangling
	of an individual block, the preferred way is to add the <code>header-args</code> property
	on the parent heading:
	</p>

	<div class="org-src-container">
	<pre class="src src-org" id="org5632e95"><span style="color: #a0522d;">** Disabled heading</span>
	<span style="color: #a020f0;">   :PROPERTIES:</span>
	<span style="color: #a020f0;">:header-args+:</span> :tangle no
	<span style="color: #a020f0;">   :END:</span>
	</pre>
	</div>

	<p>
	This can be done by adding the text manually or by using the <code>org-set-property</code>
	function, which is bound to <kbd>C-c</kbd>&nbsp;<kbd>C-x</kbd>&nbsp;<kbd>p</kbd> by default.  Alternatively,
	individual source blocks can be disabled by adding <code>:tangle no</code> on the
	<code>#+BEGIN_SRC</code> line.
	</p>

	<p>
	It is important to note that when tangling this file, any change made directly
	to the lua files will be overridden by the code in this org file.  This can be
	prevented by changing the permissions of the tangled files (see
	<a href="http://orgmode.org/manual/tangle_002dmode.html">http://orgmode.org/manual/tangle_002dmode.html</a>).  Alternatively, the detangle
	functionality in org-mode can be utilized to merge changes from the lua files
	back to this org file: simply run <code>org-detangle</code> from the modified lua file and
	changes should be merged back.  This requires the <code>#+PROPERTY: header-args
	:comments link</code> option which is set at the top of this file.
	</p>

	<p>
	This org file can also be exported to html to produce the documentation.  Note
	that exporting this file (e.g. to HTML) executes some bash scripts (for
	screenshots for instance), so use at your own risk.
	</p>



	<p>
	<a href="posts/2016-10-05-Awesome-wm_configuration.html">(Read more)</a>
	</p>
	</div>
	</div>
	]]></description>
</item>
</channel>
</rss>
